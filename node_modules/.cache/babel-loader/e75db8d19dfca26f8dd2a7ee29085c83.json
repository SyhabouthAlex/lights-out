{"ast":null,"code":"var _jsxFileName = \"E:\\\\code\\\\react-lights-out\\\\src\\\\Board.js\";\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({\n  nrows,\n  ncols,\n  chanceLightStartsOn\n}) {\n  const [board, setBoard] = useState(createBoard());\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  function createBoard() {\n    let initialBoard = []; // TODO: create array-of-arrays of true/false values\n\n    for (let i = 0; i < nrows; i++) {\n      let row = [];\n\n      for (let j = 0; j < ncols; j++) {\n        // If random number is less than 0.5, put an unlit light, if it's greater, put a lit light\n        if (Math.random() < 0.5) {\n          row.push(false);\n        } else {\n          row.push(true);\n        }\n\n        ;\n      }\n\n      ;\n      initialBoard.push(row);\n    }\n\n    ;\n    return initialBoard;\n  }\n\n  console.log(board);\n\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n    for (let row of board) {\n      for (let cell of row) {\n        if (cell === true) {\n          return false;\n        }\n\n        ;\n      }\n\n      ;\n    }\n\n    ;\n    return true;\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      }; // TODO: Make a (deep) copy of the oldBoard\n\n\n      let copy = [...oldBoard]; // TODO: in the copy, flip this cell and the cells around it\n\n      flipCell(y, x, copy);\n\n      if (y < nrows - 1) {\n        flipCell(y + 1, x, copy);\n      }\n\n      if (y > 0) {\n        flipCell(y - 1, x, copy);\n      }\n\n      if (x < ncols - 1) {\n        flipCell(y, x + 1, copy);\n      }\n\n      if (x > 0) {\n        flipCell(y, x - 1, copy);\n      } // TODO: return the copy\n\n\n      return copy;\n    });\n  } // if the game is won, just show a winning msg & render nothing else\n\n\n  if (hasWon()) {\n    return /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 12\n      }\n    }, \"Congratulations! You won!\");\n  } // make table board\n\n\n  return /*#__PURE__*/React.createElement(\"table\", {\n    className: \"Board\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 5\n    }\n  }, board.map(row => /*#__PURE__*/React.createElement(\"tr\", {\n    className: \"Board-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 25\n    }\n  }, row.map(cell => /*#__PURE__*/React.createElement(Cell, {\n    flipCellsAroundMe: flipCellsAround,\n    isLit: cell,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 68\n    }\n  })))));\n}\n\nexport default Board;","map":{"version":3,"sources":["E:/code/react-lights-out/src/Board.js"],"names":["React","useState","Cell","Board","nrows","ncols","chanceLightStartsOn","board","setBoard","createBoard","initialBoard","i","row","j","Math","random","push","console","log","hasWon","cell","flipCellsAround","coord","oldBoard","y","x","split","map","Number","flipCell","boardCopy","copy"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,aAAP;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,SAASC,KAAT,CAAe;AAAEC,EAAAA,KAAF;AAASC,EAAAA,KAAT;AAAgBC,EAAAA;AAAhB,CAAf,EAAsD;AACpD,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAACQ,WAAW,EAAZ,CAAlC;AAEA;;AACA,WAASA,WAAT,GAAuB;AACrB,QAAIC,YAAY,GAAG,EAAnB,CADqB,CAErB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,KAApB,EAA2BO,CAAC,EAA5B,EAAgC;AAC9B,UAAIC,GAAG,GAAG,EAAV;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,KAApB,EAA2BQ,CAAC,EAA5B,EAAgC;AAC9B;AACA,YAAIC,IAAI,CAACC,MAAL,KAAgB,GAApB,EAAyB;AACvBH,UAAAA,GAAG,CAACI,IAAJ,CAAS,KAAT;AACD,SAFD,MAGK;AACHJ,UAAAA,GAAG,CAACI,IAAJ,CAAS,IAAT;AACD;;AAAA;AACF;;AAAA;AACDN,MAAAA,YAAY,CAACM,IAAb,CAAkBJ,GAAlB;AACD;;AAAA;AACD,WAAOF,YAAP;AACD;;AACDO,EAAAA,OAAO,CAACC,GAAR,CAAYX,KAAZ;;AACA,WAASY,MAAT,GAAkB;AAChB;AACA,SAAK,IAAIP,GAAT,IAAgBL,KAAhB,EAAuB;AACrB,WAAK,IAAIa,IAAT,IAAiBR,GAAjB,EAAsB;AACpB,YAAIQ,IAAI,KAAK,IAAb,EAAmB;AACjB,iBAAO,KAAP;AACD;;AAAA;AACF;;AAAA;AACF;;AAAA;AACD,WAAO,IAAP;AACD;;AAED,WAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAC9Bd,IAAAA,QAAQ,CAACe,QAAQ,IAAI;AACnB,YAAM,CAACC,CAAD,EAAIC,CAAJ,IAASH,KAAK,CAACI,KAAN,CAAY,GAAZ,EAAiBC,GAAjB,CAAqBC,MAArB,CAAf;;AAEA,YAAMC,QAAQ,GAAG,CAACL,CAAD,EAAIC,CAAJ,EAAOK,SAAP,KAAqB;AACpC;AAEA,YAAIL,CAAC,IAAI,CAAL,IAAUA,CAAC,GAAGpB,KAAd,IAAuBmB,CAAC,IAAI,CAA5B,IAAiCA,CAAC,GAAGpB,KAAzC,EAAgD;AAC9C0B,UAAAA,SAAS,CAACN,CAAD,CAAT,CAAaC,CAAb,IAAkB,CAACK,SAAS,CAACN,CAAD,CAAT,CAAaC,CAAb,CAAnB;AACD;AACF,OAND,CAHmB,CAWnB;;;AACA,UAAIM,IAAI,GAAG,CAAC,GAAGR,QAAJ,CAAX,CAZmB,CAanB;;AACAM,MAAAA,QAAQ,CAACL,CAAD,EAAIC,CAAJ,EAAOM,IAAP,CAAR;;AACA,UAAIP,CAAC,GAAGpB,KAAK,GAAG,CAAhB,EAAmB;AACjByB,QAAAA,QAAQ,CAACL,CAAC,GAAG,CAAL,EAAQC,CAAR,EAAWM,IAAX,CAAR;AACD;;AACD,UAAIP,CAAC,GAAG,CAAR,EAAW;AACTK,QAAAA,QAAQ,CAACL,CAAC,GAAG,CAAL,EAAQC,CAAR,EAAWM,IAAX,CAAR;AACD;;AACD,UAAIN,CAAC,GAAGpB,KAAK,GAAG,CAAhB,EAAmB;AACjBwB,QAAAA,QAAQ,CAACL,CAAD,EAAIC,CAAC,GAAG,CAAR,EAAWM,IAAX,CAAR;AACD;;AACD,UAAIN,CAAC,GAAG,CAAR,EAAW;AACTI,QAAAA,QAAQ,CAACL,CAAD,EAAIC,CAAC,GAAG,CAAR,EAAWM,IAAX,CAAR;AACD,OA1BkB,CA2BnB;;;AACA,aAAOA,IAAP;AACD,KA7BO,CAAR;AA8BD,GAlEmD,CAoEpD;;;AACA,MAAIZ,MAAM,EAAV,EAAc;AACZ,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAAP;AACD,GAvEmD,CAyEpD;;;AACA,sBACE;AAAO,IAAA,SAAS,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGZ,KAAK,CAACoB,GAAN,CAAUf,GAAG,iBAAI;AAAI,IAAA,SAAS,EAAC,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA2BA,GAAG,CAACe,GAAJ,CAAQP,IAAI,iBAAI,oBAAC,IAAD;AAAM,IAAA,iBAAiB,EAAEC,eAAzB;AAA0C,IAAA,KAAK,EAAED,IAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAhB,CAA3B,CAAjB,CADH,CADF;AAKD;;AAED,eAAejB,KAAf","sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows, ncols, chanceLightStartsOn }) {\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    // TODO: create array-of-arrays of true/false values\n    for (let i = 0; i < nrows; i++) {\n      let row = [];\n      for (let j = 0; j < ncols; j++) {\n        // If random number is less than 0.5, put an unlit light, if it's greater, put a lit light\n        if (Math.random() < 0.5) {\n          row.push(false);\n        }\n        else {\n          row.push(true);\n        };\n      };\n      initialBoard.push(row);\n    };\n    return initialBoard;\n  }\n  console.log(board)\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n    for (let row of board) {\n      for (let cell of row) {\n        if (cell === true) {\n          return false;\n        };\n      };\n    };\n    return true;\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n      let copy = [...oldBoard];\n      // TODO: in the copy, flip this cell and the cells around it\n      flipCell(y, x, copy);\n      if (y < nrows - 1) {\n        flipCell(y + 1, x, copy);\n      }\n      if (y > 0) {\n        flipCell(y - 1, x, copy);\n      }\n      if (x < ncols - 1) {\n        flipCell(y, x + 1, copy);\n      }\n      if (x > 0) {\n        flipCell(y, x - 1, copy);\n      }\n      // TODO: return the copy\n      return copy;\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n  if (hasWon()) {\n    return <h1>Congratulations! You won!</h1>\n  }\n\n  // make table board\n  return (\n    <table className=\"Board\">\n      {board.map(row => <tr className=\"Board-row\">{row.map(cell => <Cell flipCellsAroundMe={flipCellsAround} isLit={cell}/>)}</tr>)}\n    </table>\n  )\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}