{"ast":null,"code":"var _jsxFileName = \"E:\\\\code\\\\react-lights-out\\\\src\\\\Board.js\";\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({\n  nrows = 5,\n  ncols = 5,\n  chanceLightStartsOn = 0.5\n}) {\n  const [board, setBoard] = useState(createBoard());\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  function createBoard() {\n    let initialBoard = [];\n\n    for (let i = 0; i < nrows; i++) {\n      let row = [];\n\n      for (let j = 0; j < ncols; j++) {\n        // If random number is less than chance light starts on, put an unlit light, if it's greater, put a lit light\n        row.push(Math.random() < chanceLightStartsOn);\n      }\n\n      ;\n      initialBoard.push(row);\n    }\n\n    ;\n    return initialBoard;\n  }\n\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n    return board.every(row => row.every(cell => !cell));\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      }; // TODO: Make a (deep) copy of the oldBoard\n\n\n      let copy = [...oldBoard]; // TODO: in the copy, flip this cell and the cells around it\n\n      flipCell(y, x, copy);\n\n      if (y < nrows - 1) {\n        flipCell(y + 1, x, copy);\n      }\n\n      if (y > 0) {\n        flipCell(y - 1, x, copy);\n      }\n\n      if (x < ncols - 1) {\n        flipCell(y, x + 1, copy);\n      }\n\n      if (x > 0) {\n        flipCell(y, x - 1, copy);\n      } // TODO: return the copy\n\n\n      return copy;\n    });\n  } // if the game is won, just show a winning msg & render nothing else\n\n\n  if (hasWon()) {\n    return /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 12\n      }\n    }, \"Congratulations! You won!\");\n  } // make table board\n\n\n  let tableBoard = [];\n\n  for (let y = 0; y < nrows; y++) {\n    let row = [];\n\n    for (let x = 0; x < ncols; x++) {\n      let coord = `${y}-${x}`;\n      row.push( /*#__PURE__*/React.createElement(Cell, {\n        key: coord,\n        isLit: board[y][x],\n        flipCellsAroundMe: () => flipCellsAround(coord),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 9\n        }\n      }));\n    }\n\n    ;\n    tableBoard.push( /*#__PURE__*/React.createElement(\"tr\", {\n      key: y,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 21\n      }\n    }, row));\n  }\n\n  ;\n  return /*#__PURE__*/React.createElement(\"table\", {\n    className: \"Board\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }\n  }, tableBoard));\n}\n\nexport default Board;","map":{"version":3,"sources":["E:/code/react-lights-out/src/Board.js"],"names":["React","useState","Cell","Board","nrows","ncols","chanceLightStartsOn","board","setBoard","createBoard","initialBoard","i","row","j","push","Math","random","hasWon","every","cell","flipCellsAround","coord","oldBoard","y","x","split","map","Number","flipCell","boardCopy","copy","tableBoard"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,aAAP;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,SAASC,KAAT,CAAe;AAAEC,EAAAA,KAAK,GAAG,CAAV;AAAaC,EAAAA,KAAK,GAAG,CAArB;AAAwBC,EAAAA,mBAAmB,GAAG;AAA9C,CAAf,EAAoE;AAClE,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAACQ,WAAW,EAAZ,CAAlC;AAEA;;AACA,WAASA,WAAT,GAAuB;AACrB,QAAIC,YAAY,GAAG,EAAnB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,KAApB,EAA2BO,CAAC,EAA5B,EAAgC;AAC9B,UAAIC,GAAG,GAAG,EAAV;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,KAApB,EAA2BQ,CAAC,EAA5B,EAAgC;AAC9B;AACAD,QAAAA,GAAG,CAACE,IAAJ,CAASC,IAAI,CAACC,MAAL,KAAgBV,mBAAzB;AACD;;AAAA;AACDI,MAAAA,YAAY,CAACI,IAAb,CAAkBF,GAAlB;AACD;;AAAA;AACD,WAAOF,YAAP;AACD;;AAED,WAASO,MAAT,GAAkB;AAChB;AACA,WAAOV,KAAK,CAACW,KAAN,CAAYN,GAAG,IAAIA,GAAG,CAACM,KAAJ,CAAUC,IAAI,IAAI,CAACA,IAAnB,CAAnB,CAAP;AACD;;AAED,WAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAC9Bb,IAAAA,QAAQ,CAACc,QAAQ,IAAI;AACnB,YAAM,CAACC,CAAD,EAAIC,CAAJ,IAASH,KAAK,CAACI,KAAN,CAAY,GAAZ,EAAiBC,GAAjB,CAAqBC,MAArB,CAAf;;AAEA,YAAMC,QAAQ,GAAG,CAACL,CAAD,EAAIC,CAAJ,EAAOK,SAAP,KAAqB;AACpC;AAEA,YAAIL,CAAC,IAAI,CAAL,IAAUA,CAAC,GAAGnB,KAAd,IAAuBkB,CAAC,IAAI,CAA5B,IAAiCA,CAAC,GAAGnB,KAAzC,EAAgD;AAC9CyB,UAAAA,SAAS,CAACN,CAAD,CAAT,CAAaC,CAAb,IAAkB,CAACK,SAAS,CAACN,CAAD,CAAT,CAAaC,CAAb,CAAnB;AACD;AACF,OAND,CAHmB,CAWnB;;;AACA,UAAIM,IAAI,GAAG,CAAC,GAAGR,QAAJ,CAAX,CAZmB,CAanB;;AACAM,MAAAA,QAAQ,CAACL,CAAD,EAAIC,CAAJ,EAAOM,IAAP,CAAR;;AACA,UAAIP,CAAC,GAAGnB,KAAK,GAAG,CAAhB,EAAmB;AACjBwB,QAAAA,QAAQ,CAACL,CAAC,GAAG,CAAL,EAAQC,CAAR,EAAWM,IAAX,CAAR;AACD;;AACD,UAAIP,CAAC,GAAG,CAAR,EAAW;AACTK,QAAAA,QAAQ,CAACL,CAAC,GAAG,CAAL,EAAQC,CAAR,EAAWM,IAAX,CAAR;AACD;;AACD,UAAIN,CAAC,GAAGnB,KAAK,GAAG,CAAhB,EAAmB;AACjBuB,QAAAA,QAAQ,CAACL,CAAD,EAAIC,CAAC,GAAG,CAAR,EAAWM,IAAX,CAAR;AACD;;AACD,UAAIN,CAAC,GAAG,CAAR,EAAW;AACTI,QAAAA,QAAQ,CAACL,CAAD,EAAIC,CAAC,GAAG,CAAR,EAAWM,IAAX,CAAR;AACD,OA1BkB,CA2BnB;;;AACA,aAAOA,IAAP;AACD,KA7BO,CAAR;AA8BD,GArDiE,CAuDlE;;;AACA,MAAIb,MAAM,EAAV,EAAc;AACZ,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAAP;AACD,GA1DiE,CA4DlE;;;AACA,MAAIc,UAAU,GAAG,EAAjB;;AAEA,OAAK,IAAIR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGnB,KAApB,EAA2BmB,CAAC,EAA5B,EAAgC;AAC9B,QAAIX,GAAG,GAAG,EAAV;;AACA,SAAK,IAAIY,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGnB,KAApB,EAA2BmB,CAAC,EAA5B,EAAgC;AAC9B,UAAIH,KAAK,GAAI,GAAEE,CAAE,IAAGC,CAAE,EAAtB;AACAZ,MAAAA,GAAG,CAACE,IAAJ,eACE,oBAAC,IAAD;AACA,QAAA,GAAG,EAAEO,KADL;AAEA,QAAA,KAAK,EAAEd,KAAK,CAACgB,CAAD,CAAL,CAASC,CAAT,CAFP;AAGA,QAAA,iBAAiB,EAAE,MAAMJ,eAAe,CAACC,KAAD,CAHxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAOD;;AAAA;AACDU,IAAAA,UAAU,CAACjB,IAAX,eAAgB;AAAI,MAAA,GAAG,EAAES,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAaX,GAAb,CAAhB;AACD;;AAAA;AAED,sBACE;AAAO,IAAA,SAAS,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGmB,UADH,CADF,CADF;AAOD;;AAED,eAAe5B,KAAf","sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows = 5, ncols = 5, chanceLightStartsOn = 0.5 }) {\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    for (let i = 0; i < nrows; i++) {\n      let row = [];\n      for (let j = 0; j < ncols; j++) {\n        // If random number is less than chance light starts on, put an unlit light, if it's greater, put a lit light\n        row.push(Math.random() < chanceLightStartsOn)\n      };\n      initialBoard.push(row);\n    };\n    return initialBoard; \n  }\n\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n    return board.every(row => row.every(cell => !cell));\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n      let copy = [...oldBoard];\n      // TODO: in the copy, flip this cell and the cells around it\n      flipCell(y, x, copy);\n      if (y < nrows - 1) {\n        flipCell(y + 1, x, copy);\n      }\n      if (y > 0) {\n        flipCell(y - 1, x, copy);\n      }\n      if (x < ncols - 1) {\n        flipCell(y, x + 1, copy);\n      }\n      if (x > 0) {\n        flipCell(y, x - 1, copy);\n      }\n      // TODO: return the copy\n      return copy;\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n  if (hasWon()) {\n    return <h1>Congratulations! You won!</h1>\n  }\n\n  // make table board\n  let tableBoard = [];\n\n  for (let y = 0; y < nrows; y++) {\n    let row = [];\n    for (let x = 0; x < ncols; x++) {\n      let coord = `${y}-${x}`;\n      row.push(\n        <Cell \n        key={coord}\n        isLit={board[y][x]}\n        flipCellsAroundMe={() => flipCellsAround(coord)}\n        />\n      );\n    };\n    tableBoard.push(<tr key={y}>{row}</tr>);\n  };\n\n  return (\n    <table className=\"Board\">\n      <tbody>\n        {tableBoard}\n      </tbody>\n    </table>\n  )\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}