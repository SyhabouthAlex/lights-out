{"ast":null,"code":"var _jsxFileName = \"E:\\\\code\\\\react-lights-out\\\\src\\\\Board.js\";\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({\n  nrows = 5,\n  ncols = 5,\n  chanceLightStartsOn = 0.5\n}) {\n  const [board, setBoard] = useState(createBoard());\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  function createBoard() {\n    return Array.from({\n      length: nrows\n    }, (_, i) => Array.from({\n      length: ncols\n    }, (_, j) => ({\n      coord: `${j}-${i}`,\n      lit: Math.random() < chanceLightStartsOn\n    })));\n  }\n\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n    for (let row of board) {\n      for (let cell of row) {\n        if (cell.lit === true) {\n          return false;\n        }\n\n        ;\n      }\n\n      ;\n    }\n\n    ;\n    return true;\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      }; // TODO: Make a (deep) copy of the oldBoard\n\n\n      let copy = [...oldBoard]; // TODO: in the copy, flip this cell and the cells around it\n\n      flipCell(y, x, copy);\n\n      if (y < nrows - 1) {\n        flipCell(y + 1, x, copy);\n      }\n\n      if (y > 0) {\n        flipCell(y - 1, x, copy);\n      }\n\n      if (x < ncols - 1) {\n        flipCell(y, x + 1, copy);\n      }\n\n      if (x > 0) {\n        flipCell(y, x - 1, copy);\n      } // TODO: return the copy\n\n\n      return copy;\n    });\n  } // if the game is won, just show a winning msg & render nothing else\n\n\n  if (hasWon()) {\n    return /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 12\n      }\n    }, \"Congratulations! You won!\");\n  }\n\n  console.log(board); // make table board\n\n  return /*#__PURE__*/React.createElement(\"table\", {\n    className: \"Board\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }, board.map(row => /*#__PURE__*/React.createElement(\"tr\", {\n    className: \"Board-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 25\n    }\n  }, row.map(cell => /*#__PURE__*/React.createElement(Cell, {\n    flipCellsAroundMe: () => flipCellsAround(cell.coord),\n    isLit: cell.lit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 68\n    }\n  }))))));\n}\n\nexport default Board;","map":{"version":3,"sources":["E:/code/react-lights-out/src/Board.js"],"names":["React","useState","Cell","Board","nrows","ncols","chanceLightStartsOn","board","setBoard","createBoard","Array","from","length","_","i","j","coord","lit","Math","random","hasWon","row","cell","flipCellsAround","oldBoard","y","x","split","map","Number","flipCell","boardCopy","copy","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,aAAP;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,SAASC,KAAT,CAAe;AAAEC,EAAAA,KAAK,GAAG,CAAV;AAAaC,EAAAA,KAAK,GAAG,CAArB;AAAwBC,EAAAA,mBAAmB,GAAG;AAA9C,CAAf,EAAoE;AAClE,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAACQ,WAAW,EAAZ,CAAlC;AAEA;;AACA,WAASA,WAAT,GAAuB;AACrB,WAAOC,KAAK,CAACC,IAAN,CAAW;AAAEC,MAAAA,MAAM,EAAER;AAAV,KAAX,EAA8B,CAACS,CAAD,EAAIC,CAAJ,KACnCJ,KAAK,CAACC,IAAN,CAAW;AAAEC,MAAAA,MAAM,EAAEP;AAAV,KAAX,EAA8B,CAACQ,CAAD,EAAIE,CAAJ,MAC5B;AACEC,MAAAA,KAAK,EAAG,GAAED,CAAE,IAAGD,CAAE,EADnB;AAEEG,MAAAA,GAAG,EAAEC,IAAI,CAACC,MAAL,KAAgBb;AAFvB,KAD4B,CAA9B,CADK,CAAP;AAQD;;AACD,WAASc,MAAT,GAAkB;AAChB;AACA,SAAK,IAAIC,GAAT,IAAgBd,KAAhB,EAAuB;AACrB,WAAK,IAAIe,IAAT,IAAiBD,GAAjB,EAAsB;AACpB,YAAIC,IAAI,CAACL,GAAL,KAAa,IAAjB,EAAuB;AACrB,iBAAO,KAAP;AACD;;AAAA;AACF;;AAAA;AACF;;AAAA;AACD,WAAO,IAAP;AACD;;AAED,WAASM,eAAT,CAAyBP,KAAzB,EAAgC;AAC9BR,IAAAA,QAAQ,CAACgB,QAAQ,IAAI;AACnB,YAAM,CAACC,CAAD,EAAIC,CAAJ,IAASV,KAAK,CAACW,KAAN,CAAY,GAAZ,EAAiBC,GAAjB,CAAqBC,MAArB,CAAf;;AAEA,YAAMC,QAAQ,GAAG,CAACL,CAAD,EAAIC,CAAJ,EAAOK,SAAP,KAAqB;AACpC;AAEA,YAAIL,CAAC,IAAI,CAAL,IAAUA,CAAC,GAAGrB,KAAd,IAAuBoB,CAAC,IAAI,CAA5B,IAAiCA,CAAC,GAAGrB,KAAzC,EAAgD;AAC9C2B,UAAAA,SAAS,CAACN,CAAD,CAAT,CAAaC,CAAb,IAAkB,CAACK,SAAS,CAACN,CAAD,CAAT,CAAaC,CAAb,CAAnB;AACD;AACF,OAND,CAHmB,CAWnB;;;AACA,UAAIM,IAAI,GAAG,CAAC,GAAGR,QAAJ,CAAX,CAZmB,CAanB;;AACAM,MAAAA,QAAQ,CAACL,CAAD,EAAIC,CAAJ,EAAOM,IAAP,CAAR;;AACA,UAAIP,CAAC,GAAGrB,KAAK,GAAG,CAAhB,EAAmB;AACjB0B,QAAAA,QAAQ,CAACL,CAAC,GAAG,CAAL,EAAQC,CAAR,EAAWM,IAAX,CAAR;AACD;;AACD,UAAIP,CAAC,GAAG,CAAR,EAAW;AACTK,QAAAA,QAAQ,CAACL,CAAC,GAAG,CAAL,EAAQC,CAAR,EAAWM,IAAX,CAAR;AACD;;AACD,UAAIN,CAAC,GAAGrB,KAAK,GAAG,CAAhB,EAAmB;AACjByB,QAAAA,QAAQ,CAACL,CAAD,EAAIC,CAAC,GAAG,CAAR,EAAWM,IAAX,CAAR;AACD;;AACD,UAAIN,CAAC,GAAG,CAAR,EAAW;AACTI,QAAAA,QAAQ,CAACL,CAAD,EAAIC,CAAC,GAAG,CAAR,EAAWM,IAAX,CAAR;AACD,OA1BkB,CA2BnB;;;AACA,aAAOA,IAAP;AACD,KA7BO,CAAR;AA8BD,GAzDiE,CA2DlE;;;AACA,MAAIZ,MAAM,EAAV,EAAc;AACZ,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAAP;AACD;;AACDa,EAAAA,OAAO,CAACC,GAAR,CAAY3B,KAAZ,EA/DkE,CAgElE;;AACA,sBACE;AAAO,IAAA,SAAS,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCA,KAAK,CAACqB,GAAN,CAAUP,GAAG,iBAAI;AAAI,IAAA,SAAS,EAAC,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA2BA,GAAG,CAACO,GAAJ,CAAQN,IAAI,iBAAI,oBAAC,IAAD;AAAM,IAAA,iBAAiB,EAAE,MAAMC,eAAe,CAACD,IAAI,CAACN,KAAN,CAA9C;AAA4D,IAAA,KAAK,EAAEM,IAAI,CAACL,GAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAhB,CAA3B,CAAjB,CADD,CADF,CADF;AAOD;;AAED,eAAed,KAAf","sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows = 5, ncols = 5, chanceLightStartsOn = 0.5 }) {\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    return Array.from({ length: nrows }, (_, i) => \n      Array.from({ length: ncols }, (_, j) => (\n        {\n          coord: `${j}-${i}`, \n          lit: Math.random() < chanceLightStartsOn \n        })\n      )\n    )\n  }\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n    for (let row of board) {\n      for (let cell of row) {\n        if (cell.lit === true) {\n          return false;\n        };\n      };\n    };\n    return true;\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n      let copy = [...oldBoard];\n      // TODO: in the copy, flip this cell and the cells around it\n      flipCell(y, x, copy);\n      if (y < nrows - 1) {\n        flipCell(y + 1, x, copy);\n      }\n      if (y > 0) {\n        flipCell(y - 1, x, copy);\n      }\n      if (x < ncols - 1) {\n        flipCell(y, x + 1, copy);\n      }\n      if (x > 0) {\n        flipCell(y, x - 1, copy);\n      }\n      // TODO: return the copy\n      return copy;\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n  if (hasWon()) {\n    return <h1>Congratulations! You won!</h1>\n  }\n  console.log(board)\n  // make table board\n  return (\n    <table className=\"Board\">\n      <tbody>\n      {board.map(row => <tr className=\"Board-row\">{row.map(cell => <Cell flipCellsAroundMe={() => flipCellsAround(cell.coord)} isLit={cell.lit}/>)}</tr>)}\n      </tbody>\n    </table>\n  )\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}